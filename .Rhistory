install.packages(c("JGR","Deducer","DeducerExtras"))
install.packages(c("MASS", "class", "foreign", "nlme", "nnet", "spatial"))
install.packages(c("MASS", "Rcpp", "lme4", "mgcv", "stringi"))
install.packages("swirl")
library("swirl")
swirl()
library(swirl)
install_from_swirl("R Programming")
swirl()
5 +7
x <- 5+7
x
y <- x-3
y
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt <- z-1
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
my_vector <- c(1:20)
my_vector <- c(1:21)
my_vector <- 1:20
my_vector
dim(my_vector)
lenght(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
View(my_vector)
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames?
?colnames
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(false == true) == FALSE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
exit()
swirl()
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
?swirl
bye()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
swirl()
swirl()
5+7
bye()
bye()
swirl()
bye()
deducer()
install.packages(c("JGR","Deducer","DeducerExtras"))
install.packages(c("JGR","Deducer","DeducerExtras"))
Sys.setenv(NOAWT=1)
library(JGR)
Sys.unsetenv("NOAWT")
JGR()
library(swirl)
swirl()
library(swirl)
swirl()
5+7
x <- 5 + 7
help()
?
exit()
exit()
quit()
install.packages("KernSmooth")
library(KernSmooth)
library(swirl)
swirl()
x
x
set.seed(1)
rpois(5, 2)
x <- rep(0:1, each = 5)
updateR()
packageStatus()
install.packages(c("BH", "car", "Deducer", "effects", "ggplot2", "jsonlite", "Matrix", "mgcv", "pbkrtest"))
install.packages("RMySQL")
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = F)
play
play()
path2csv
nxt()
read.csv(path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, -r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -5:20)
select(cran, -X:size)
select(cran, -(X:size))
-5:20
select(cran, -(X:size))
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version == "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN" | country == "US")
filter(cran, r_version <= "3.0.2", country == "US" | country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3,size_mb = size/2^20)
play()
cran3
nxt()
mutate(cran3,size_mb = size/2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
exit()
?read.csv
swirl()
swirl()
1
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(df)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(X:size)
select(cran, X:size)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(size, ip_id)
cran2 <- select(cran2, size, ip_id)
select(cran, size:ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
cran2(cran2, country, desc(r_version), ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(ip_id, package, size)
cran3 <- select(cran2, ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
adsf
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
View(cran)
cran$date
library(swirl)
swirl()
install.packages("httr")
myapp <- oauth_app("github",
key = "079ebf7e772eeb326904",
secret = "f9d85938fd8e815eca68988fdd067a8f5f42c99b")
library(httr)
myapp <- oauth_app("github",
key = "079ebf7e772eeb326904",
secret = "f9d85938fd8e815eca68988fdd067a8f5f42c99b")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
key = "079ebf7e772eeb326904",
secret = "f9d85938fd8e815eca68988fdd067a8f5f42c99b")
oauth_endpoints("github")
library(httr)
myapp <- oauth_app("github",
key = "079ebf7e772eeb326904",
secret = "f9d85938fd8e815eca68988fdd067a8f5f42c99b")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
myapp <- oauth_app("github",
key = "079ebf7e772eeb326904",
secret = "f9d85938fd8e815eca68988fdd067a8f5f42c99b")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
content(req)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "079ebf7e772eeb326904",
secret = "f9d85938fd8e815eca68988fdd067a8f5f42c99b")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
content(req)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "079ebf7e772eeb326904",
secret = "f9d85938fd8e815eca68988fdd067a8f5f42c99b")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
library(httr)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
request1 <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
myjson <- content(request1)
myjson2 <- jsonline::fromJSON(toJSON(myjson))
install.packages("jsonlite")
myjson2 <- jsonline::fromJSON(toJSON(myjson))
library(jsonlite)
myjson2 <- jsonline::fromJSON(toJSON(myjson))
library(jsonline)
library(jsonlite)
myjson2 <- jsonlite::fromJSON(toJSON(myjson))
view(myjson2)
install.packages("httpuv")
library(httpuv)
view(myjson2)
library(httr)
library(jsonlite)
library(httpuv)
view(myjson2)
content(myjson2)
stop_for_status(req)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "079ebf7e772eeb326904",
secret = "f9d85938fd8e815eca68988fdd067a8f5f42c99b")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "079ebf7e772eeb326904",
secret = "f9d85938fd8e815eca68988fdd067a8f5f42c99b")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
request1 <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
myjson <- content(request1)
myjson2 <- jsonlite::fromJSON(toJSON(myjson))
content(myjson2)
view(myjson2)
library(httr)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "079ebf7e772eeb326904",
secret = "f9d85938fd8e815eca68988fdd067a8f5f42c99b")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", "quiz1.for", method = "curl")
q5 <- read.fwf("./quiz1.for",skip = 4, widths = c(15,4,4,9,4,9,4,9,4))
sum(q5[4])
install.packages(c("digest", "Rcpp", "rJava"))
library(swirl)
swirl()
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(data = res, col = sex_class, into = c("sex", "class")
)
submit()
students3
submit()
?spread
submit()
extract_numeric("class5")
submit()
students4
submit()
submit()
View(student_info)
submit()
passed
failed
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
sat
?separate
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(studets, sex, count -grade)
gather(students, sex, count -grade)
gather(students, sex, count, -grade)
students2
gather(students2, sex_class, count)
gather(studetnts2, sex_class, count, -grade)
gather(students2, sex_class, count, -grade)
res
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(data = res, col = sex_class, into = c("sex", "class"))
submit()
submit()
submit()
students3
submit()
?spread
submit()
extract_numeric("class5")
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
sat
submit()
submit()
library(swirl)
swirl()
View(students4)
View(students2)
View(students3)
View(students4)
View(sat)
View(passed)
View(failed)
setwd("~/projects/r/alpha")
library(foreign)
library(dplyr)
library(xlsx)
## Cargar la información necesaria
pob_sec_f <- read.dbf("./data/poblacion/secciones_E25.dbf", as.is = T)
eco_sec_f <- read.dbf("./data/caracteristicasEconomicas/secciones_E25ce.dbf", as.is = T)
edu_sec_f <- read.dbf("./data/caracteristicasEducativas/secciones_E25.dbf", as.is = T)
dis_sec_f <- read.dbf("./data/discapacidad/secciones_E25.dbf", as.is = T)
mig_sec_f <- read.dbf("./data/migracion/secciones_E25.dbf", as.is = T)
sal_sec_f <- read.dbf("./data/serviciosDeSalud/secciones_E25.dbf", as.is = T)
viv_sec_f <- read.dbf("./data/viviendas/secciones_E25v.dbf", as.is = T)
ele_sec_f <- read.xlsx("./data/elecciones2015/diputados_plain.xlsx", sheetName = "data", colClasses = "integer")
descriptores <- read.dbf("./descriptores/DESCRIPTORES_CENSO2010.dbf", as.is = T)
pob_sec <- tbl_df(pob_sec_f)
eco_sec <- tbl_df(eco_sec_f)
edu_sec <- tbl_df(edu_sec_f)
dis_sec <- tbl_df(dis_sec_f)
mig_sec <- tbl_df(mig_sec_f)
sal_sec <- tbl_df(sal_sec_f)
viv_sec <- tbl_df(viv_sec_f)
ele_sec <- tbl_df(ele_sec_f)
rm(pob_sec_f, eco_sec_f, edu_sec_f, dis_sec_f, mig_sec_f, sal_sec_f, viv_sec_f, ele_sec_f)
joined <- left_join(pob_sec, eco_sec)
joined <- left_join(joined, edu_sec)
joined <- left_join(joined, dis_sec)
joined <- left_join(joined, mig_sec)
joined <- left_join(joined, sal_sec)
joined <- left_join(joined, viv_sec)
joined <- left_join(joined, ele_sec)
ratt <- as.data.frame(joined)
library(rattle)
rattle()
